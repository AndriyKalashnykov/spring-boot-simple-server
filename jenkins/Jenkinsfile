import jenkins.model.*

openshift.withCluster() {
  env.NAMESPACE = openshift.project()
  env.APP_NAME = "${env.JOB_NAME}".replaceAll(/-?pipeline-?/, '').replaceAll(/-?${env.NAMESPACE}-?/, '').replaceAll("/","")
  echo "Starting Pipeline for ${APP_NAME}..."
  def projectBase = "${env.NAMESPACE}".replaceAll(/-dev/, '')
  env.STAGE1 = "${projectBase}-dev"
  env.STAGE2 = "${projectBase}-stage"
  env.STAGE3 = "${projectBase}-prod"
  sh """
     set +x
     echo "${NAMESPACE}"
     echo "${APP_NAME}"
     echo "${STAGE1}"
     echo "${STAGE2}"
     echo "${STAGE3}"
  """
}


pipeline {

  agent { label 'maven' }

  stages {

    stage('Code Build') {
      steps {
        git url: "${SOURCE_CODE_URL}"
        sh "mvn clean install -q"
      }
   }

    stage('Create Image Stream') {
        when {
            expression {
                openshift.withCluster() {
                    return !openshift.selector("is", "${APP_NAME}").exists();
                }
            }
        }
        steps {
            sh """
                set +x
                oc create imagestream spring-boot-simple-server
            """
        }
    }

    stage('Image Build') {
      steps {
        echo 'Building Image from Jar File'
        sh """
          set +x
          rm -rf oc-build && mkdir -p oc-build/deployments
          for t in \$(echo "jar;war;ear" | tr ";" "\\n"); do
            cp -rfv ./target/*.\$t oc-build/deployments/ 2> /dev/null || echo "No \$t files"
          done
        """

        sh """
          set +x
          oc process -f templates/build.yml | oc apply -f -
          oc process -f templates/deployment.yml | oc apply -f -
        """

        //oc apply -f templates/build.yml -n ${env.NAMESPACE}

        script {
          openshift.withCluster() {
            openshift.startBuild("${APP_NAME}", "--from-file=./target/spring-boot-simple-server-0.0.1-SNAPSHOT.jar", "--wait", "--follow")
            //openshift.startBuild("--from-dir=oc-build", "--wait")
            //openshift.selector("bc", "spring-boot-simple-server").startBuild("--from-file=oc-build/deployments/spring-boot-simple-server-0.0.1-SNAPSHOT.jar", "--wait")
          }
        }
      }
    }

    stage ('Verify Deployment to Dev') {
      steps {
        script {
          openshift.withCluster() {
            def dcObj = openshift.selector('dc', env.APP_NAME).object()
            def podSelector = openshift.selector('pod', [deployment: "${APP_NAME}-${dcObj.status.latestVersion}"])
            podSelector.untilEach {
                echo "pod: ${it.name()}"
                return it.object().status.containerStatuses[0].ready
            }
          }
        }
      }
    }

     stage('Promote to Dev') {
       steps {
         script {
           openshift.withCluster() {
             openshift.tag("${env.NAMESPACE}/${env.APP_NAME}:latest", "${env.STAGE1}/${env.APP_NAME}:latest")
           }
         }
       }
     }

     stage ('Verify Deployment to Dev') {
       steps {
         script {
           openshift.withCluster() {
               openshift.withProject("${STAGE1}") {
               def dcObj = openshift.selector('dc', env.APP_NAME).object()
               def podSelector = openshift.selector('pod', [deployment: "${APP_NAME}-${dcObj.status.latestVersion}"])
               podSelector.untilEach {
                   echo "pod: ${it.name()}"
                   return it.object().status.containerStatuses[0].ready
               }
             }
           }
         }
       }
     }
  }
}
